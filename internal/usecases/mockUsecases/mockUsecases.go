// Code generated by MockGen. DO NOT EDIT.
// Source: usecaseInterface.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	reflect "reflect"

	entities "github.com/akshay0074700747/project-company_management-project-service/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockProjectUsecaseInterfaces is a mock of ProjectUsecaseInterfaces interface.
type MockProjectUsecaseInterfaces struct {
	ctrl     *gomock.Controller
	recorder *MockProjectUsecaseInterfacesMockRecorder
}

// MockProjectUsecaseInterfacesMockRecorder is the mock recorder for MockProjectUsecaseInterfaces.
type MockProjectUsecaseInterfacesMockRecorder struct {
	mock *MockProjectUsecaseInterfaces
}

// NewMockProjectUsecaseInterfaces creates a new mock instance.
func NewMockProjectUsecaseInterfaces(ctrl *gomock.Controller) *MockProjectUsecaseInterfaces {
	mock := &MockProjectUsecaseInterfaces{ctrl: ctrl}
	mock.recorder = &MockProjectUsecaseInterfacesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectUsecaseInterfaces) EXPECT() *MockProjectUsecaseInterfacesMockRecorder {
	return m.recorder
}

// AcceptInvitation mocks base method.
func (m *MockProjectUsecaseInterfaces) AcceptInvitation(arg0 entities.Members, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvitation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptInvitation indicates an expected call of AcceptInvitation.
func (mr *MockProjectUsecaseInterfacesMockRecorder) AcceptInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitation", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).AcceptInvitation), arg0, arg1)
}

// AddMemberStatueses mocks base method.
func (m *MockProjectUsecaseInterfaces) AddMemberStatueses(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMemberStatueses", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMemberStatueses indicates an expected call of AddMemberStatueses.
func (mr *MockProjectUsecaseInterfacesMockRecorder) AddMemberStatueses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMemberStatueses", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).AddMemberStatueses), arg0)
}

// Addmembers mocks base method.
func (m *MockProjectUsecaseInterfaces) Addmembers(arg0 entities.Members) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addmembers", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Addmembers indicates an expected call of Addmembers.
func (mr *MockProjectUsecaseInterfacesMockRecorder) Addmembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addmembers", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).Addmembers), arg0)
}

// ApproveExtensionRequest mocks base method.
func (m *MockProjectUsecaseInterfaces) ApproveExtensionRequest(arg0 uint, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveExtensionRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveExtensionRequest indicates an expected call of ApproveExtensionRequest.
func (mr *MockProjectUsecaseInterfacesMockRecorder) ApproveExtensionRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveExtensionRequest", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).ApproveExtensionRequest), arg0, arg1)
}

// AskExtension mocks base method.
func (m *MockProjectUsecaseInterfaces) AskExtension(arg0 entities.Extensions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskExtension", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AskExtension indicates an expected call of AskExtension.
func (mr *MockProjectUsecaseInterfacesMockRecorder) AskExtension(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskExtension", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).AskExtension), arg0)
}

// AssignTasks mocks base method.
func (m *MockProjectUsecaseInterfaces) AssignTasks(arg0 entities.TaskDta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignTasks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignTasks indicates an expected call of AssignTasks.
func (mr *MockProjectUsecaseInterfacesMockRecorder) AssignTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignTasks", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).AssignTasks), arg0)
}

// CreateProject mocks base method.
func (m *MockProjectUsecaseInterfaces) CreateProject(arg0 entities.Credentials, arg1, arg2 string) (entities.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0, arg1, arg2)
	ret0, _ := ret[0].(entities.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectUsecaseInterfacesMockRecorder) CreateProject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).CreateProject), arg0, arg1, arg2)
}

// DeleteFeedback mocks base method.
func (m *MockProjectUsecaseInterfaces) DeleteFeedback(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeedback", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFeedback indicates an expected call of DeleteFeedback.
func (mr *MockProjectUsecaseInterfacesMockRecorder) DeleteFeedback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeedback", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).DeleteFeedback), arg0, arg1)
}

// DownloadTask mocks base method.
func (m *MockProjectUsecaseInterfaces) DownloadTask(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadTask", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadTask indicates an expected call of DownloadTask.
func (mr *MockProjectUsecaseInterfacesMockRecorder) DownloadTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadTask", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).DownloadTask), arg0)
}

// DropProject mocks base method.
func (m *MockProjectUsecaseInterfaces) DropProject(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropProject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropProject indicates an expected call of DropProject.
func (mr *MockProjectUsecaseInterfacesMockRecorder) DropProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropProject", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).DropProject), arg0)
}

// EditFeedback mocks base method.
func (m *MockProjectUsecaseInterfaces) EditFeedback(arg0 entities.Ratings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditFeedback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditFeedback indicates an expected call of EditFeedback.
func (mr *MockProjectUsecaseInterfacesMockRecorder) EditFeedback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditFeedback", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).EditFeedback), arg0)
}

// EditMember mocks base method.
func (m *MockProjectUsecaseInterfaces) EditMember(arg0 entities.Members) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMember", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditMember indicates an expected call of EditMember.
func (mr *MockProjectUsecaseInterfacesMockRecorder) EditMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMember", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).EditMember), arg0)
}

// EditProject mocks base method.
func (m *MockProjectUsecaseInterfaces) EditProject(arg0 entities.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditProject indicates an expected call of EditProject.
func (mr *MockProjectUsecaseInterfacesMockRecorder) EditProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProject", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).EditProject), arg0)
}

// GetCompletedMembers mocks base method.
func (m *MockProjectUsecaseInterfaces) GetCompletedMembers(arg0 string, arg1 entities.ListofUserProgress, arg2 bool) ([]entities.GetCompletedMemebersUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompletedMembers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entities.GetCompletedMemebersUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompletedMembers indicates an expected call of GetCompletedMembers.
func (mr *MockProjectUsecaseInterfacesMockRecorder) GetCompletedMembers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompletedMembers", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).GetCompletedMembers), arg0, arg1, arg2)
}

// GetCountMembers mocks base method.
func (m *MockProjectUsecaseInterfaces) GetCountMembers(arg0 string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountMembers", arg0)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountMembers indicates an expected call of GetCountMembers.
func (mr *MockProjectUsecaseInterfacesMockRecorder) GetCountMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountMembers", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).GetCountMembers), arg0)
}

// GetExtensionRequestsinaProject mocks base method.
func (m *MockProjectUsecaseInterfaces) GetExtensionRequestsinaProject(arg0 string) ([]entities.Extensions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtensionRequestsinaProject", arg0)
	ret0, _ := ret[0].([]entities.Extensions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtensionRequestsinaProject indicates an expected call of GetExtensionRequestsinaProject.
func (mr *MockProjectUsecaseInterfacesMockRecorder) GetExtensionRequestsinaProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionRequestsinaProject", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).GetExtensionRequestsinaProject), arg0)
}

// GetIssuesofMember mocks base method.
func (m *MockProjectUsecaseInterfaces) GetIssuesofMember(arg0, arg1 string) (entities.Issues, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuesofMember", arg0, arg1)
	ret0, _ := ret[0].(entities.Issues)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuesofMember indicates an expected call of GetIssuesofMember.
func (mr *MockProjectUsecaseInterfacesMockRecorder) GetIssuesofMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuesofMember", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).GetIssuesofMember), arg0, arg1)
}

// GetIssuesofProject mocks base method.
func (m *MockProjectUsecaseInterfaces) GetIssuesofProject(arg0 string) ([]entities.Issues, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuesofProject", arg0)
	ret0, _ := ret[0].([]entities.Issues)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuesofProject indicates an expected call of GetIssuesofProject.
func (mr *MockProjectUsecaseInterfacesMockRecorder) GetIssuesofProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuesofProject", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).GetIssuesofProject), arg0)
}

// GetLiveProjectsofCompany mocks base method.
func (m *MockProjectUsecaseInterfaces) GetLiveProjectsofCompany(arg0 string) ([]entities.GetLiveProjectsUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiveProjectsofCompany", arg0)
	ret0, _ := ret[0].([]entities.GetLiveProjectsUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiveProjectsofCompany indicates an expected call of GetLiveProjectsofCompany.
func (mr *MockProjectUsecaseInterfacesMockRecorder) GetLiveProjectsofCompany(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiveProjectsofCompany", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).GetLiveProjectsofCompany), arg0)
}

// GetProgressofMember mocks base method.
func (m *MockProjectUsecaseInterfaces) GetProgressofMember(arg0 entities.UserProgressUsecaseRes) (entities.UserProgressUsecaseRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgressofMember", arg0)
	ret0, _ := ret[0].(entities.UserProgressUsecaseRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgressofMember indicates an expected call of GetProgressofMember.
func (mr *MockProjectUsecaseInterfacesMockRecorder) GetProgressofMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgressofMember", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).GetProgressofMember), arg0)
}

// GetProgressofMembers mocks base method.
func (m *MockProjectUsecaseInterfaces) GetProgressofMembers(arg0 entities.ListofUserProgress, arg1 string) (entities.ListofUserProgress, []string, []uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgressofMembers", arg0, arg1)
	ret0, _ := ret[0].(entities.ListofUserProgress)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].([]uint)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetProgressofMembers indicates an expected call of GetProgressofMembers.
func (mr *MockProjectUsecaseInterfacesMockRecorder) GetProgressofMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgressofMembers", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).GetProgressofMembers), arg0, arg1)
}

// GetProjectDetails mocks base method.
func (m *MockProjectUsecaseInterfaces) GetProjectDetails(arg0, arg1 string) (entities.ProjectDetailsUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectDetails", arg0, arg1)
	ret0, _ := ret[0].(entities.ProjectDetailsUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectDetails indicates an expected call of GetProjectDetails.
func (mr *MockProjectUsecaseInterfacesMockRecorder) GetProjectDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectDetails", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).GetProjectDetails), arg0, arg1)
}

// GetProjectInvites mocks base method.
func (m *MockProjectUsecaseInterfaces) GetProjectInvites(arg0 string) ([]entities.ProjectInviteUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectInvites", arg0)
	ret0, _ := ret[0].([]entities.ProjectInviteUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectInvites indicates an expected call of GetProjectInvites.
func (mr *MockProjectUsecaseInterfacesMockRecorder) GetProjectInvites(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectInvites", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).GetProjectInvites), arg0)
}

// GetProjectMembers mocks base method.
func (m *MockProjectUsecaseInterfaces) GetProjectMembers(arg0 string) ([]entities.GetProjectMembersUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectMembers", arg0)
	ret0, _ := ret[0].([]entities.GetProjectMembersUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectMembers indicates an expected call of GetProjectMembers.
func (mr *MockProjectUsecaseInterfacesMockRecorder) GetProjectMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectMembers", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).GetProjectMembers), arg0)
}

// GetProjectProgress mocks base method.
func (m *MockProjectUsecaseInterfaces) GetProjectProgress(arg0 string, arg1 entities.ListofUserProgress) (entities.GetProjectProgressUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectProgress", arg0, arg1)
	ret0, _ := ret[0].(entities.GetProjectProgressUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectProgress indicates an expected call of GetProjectProgress.
func (mr *MockProjectUsecaseInterfacesMockRecorder) GetProjectProgress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectProgress", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).GetProjectProgress), arg0, arg1)
}

// GetRating mocks base method.
func (m *MockProjectUsecaseInterfaces) GetRating(arg0, arg1 string) (entities.Ratings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRating", arg0, arg1)
	ret0, _ := ret[0].(entities.Ratings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRating indicates an expected call of GetRating.
func (mr *MockProjectUsecaseInterfacesMockRecorder) GetRating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRating", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).GetRating), arg0, arg1)
}

// GetRoleID mocks base method.
func (m *MockProjectUsecaseInterfaces) GetRoleID(arg0 string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleID", arg0)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleID indicates an expected call of GetRoleID.
func (mr *MockProjectUsecaseInterfacesMockRecorder) GetRoleID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleID", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).GetRoleID), arg0)
}

// GetTaskDetails mocks base method.
func (m *MockProjectUsecaseInterfaces) GetTaskDetails(arg0, arg1 string) (entities.TaskAssignations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskDetails", arg0, arg1)
	ret0, _ := ret[0].(entities.TaskAssignations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskDetails indicates an expected call of GetTaskDetails.
func (mr *MockProjectUsecaseInterfacesMockRecorder) GetTaskDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskDetails", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).GetTaskDetails), arg0, arg1)
}

// GetVerifiedTasks mocks base method.
func (m *MockProjectUsecaseInterfaces) GetVerifiedTasks(arg0 string) ([]entities.VerifiedTasksUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifiedTasks", arg0)
	ret0, _ := ret[0].([]entities.VerifiedTasksUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifiedTasks indicates an expected call of GetVerifiedTasks.
func (mr *MockProjectUsecaseInterfacesMockRecorder) GetVerifiedTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifiedTasks", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).GetVerifiedTasks), arg0)
}

// InsertNonTechnicalTasks mocks base method.
func (m *MockProjectUsecaseInterfaces) InsertNonTechnicalTasks(arg0 entities.NonTechnicalTaskDetials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNonTechnicalTasks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNonTechnicalTasks indicates an expected call of InsertNonTechnicalTasks.
func (mr *MockProjectUsecaseInterfacesMockRecorder) InsertNonTechnicalTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNonTechnicalTasks", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).InsertNonTechnicalTasks), arg0)
}

// InsertStatuses mocks base method.
func (m *MockProjectUsecaseInterfaces) InsertStatuses(arg0 entities.TaskStatuses) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertStatuses", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertStatuses indicates an expected call of InsertStatuses.
func (mr *MockProjectUsecaseInterfacesMockRecorder) InsertStatuses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertStatuses", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).InsertStatuses), arg0)
}

// IsCompanyBased mocks base method.
func (m *MockProjectUsecaseInterfaces) IsCompanyBased(arg0 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCompanyBased", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsCompanyBased indicates an expected call of IsCompanyBased.
func (mr *MockProjectUsecaseInterfacesMockRecorder) IsCompanyBased(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCompanyBased", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).IsCompanyBased), arg0)
}

// IsMemberAccepted mocks base method.
func (m *MockProjectUsecaseInterfaces) IsMemberAccepted(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMemberAccepted", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsMemberAccepted indicates an expected call of IsMemberAccepted.
func (mr *MockProjectUsecaseInterfacesMockRecorder) IsMemberAccepted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMemberAccepted", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).IsMemberAccepted), arg0, arg1)
}

// IsMemberExists mocks base method.
func (m *MockProjectUsecaseInterfaces) IsMemberExists(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMemberExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMemberExists indicates an expected call of IsMemberExists.
func (mr *MockProjectUsecaseInterfacesMockRecorder) IsMemberExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMemberExists", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).IsMemberExists), arg0, arg1)
}

// IsOwner mocks base method.
func (m *MockProjectUsecaseInterfaces) IsOwner(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOwner", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner.
func (mr *MockProjectUsecaseInterfacesMockRecorder) IsOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).IsOwner), arg0, arg1)
}

// LogintoProject mocks base method.
func (m *MockProjectUsecaseInterfaces) LogintoProject(arg0, arg1 string) (entities.Members, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogintoProject", arg0, arg1)
	ret0, _ := ret[0].(entities.Members)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogintoProject indicates an expected call of LogintoProject.
func (mr *MockProjectUsecaseInterfacesMockRecorder) LogintoProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogintoProject", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).LogintoProject), arg0, arg1)
}

// RaiseIssue mocks base method.
func (m *MockProjectUsecaseInterfaces) RaiseIssue(arg0 entities.Issues) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RaiseIssue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RaiseIssue indicates an expected call of RaiseIssue.
func (mr *MockProjectUsecaseInterfacesMockRecorder) RaiseIssue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RaiseIssue", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).RaiseIssue), arg0)
}

// RateTask mocks base method.
func (m *MockProjectUsecaseInterfaces) RateTask(arg0 entities.Ratings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RateTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RateTask indicates an expected call of RateTask.
func (mr *MockProjectUsecaseInterfacesMockRecorder) RateTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RateTask", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).RateTask), arg0)
}

// TerminateProjectMembers mocks base method.
func (m *MockProjectUsecaseInterfaces) TerminateProjectMembers(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateProjectMembers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminateProjectMembers indicates an expected call of TerminateProjectMembers.
func (mr *MockProjectUsecaseInterfacesMockRecorder) TerminateProjectMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateProjectMembers", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).TerminateProjectMembers), arg0, arg1)
}

// VerifyTaskCompletion mocks base method.
func (m *MockProjectUsecaseInterfaces) VerifyTaskCompletion(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyTaskCompletion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyTaskCompletion indicates an expected call of VerifyTaskCompletion.
func (mr *MockProjectUsecaseInterfacesMockRecorder) VerifyTaskCompletion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTaskCompletion", reflect.TypeOf((*MockProjectUsecaseInterfaces)(nil).VerifyTaskCompletion), arg0, arg1, arg2)
}
