// Code generated by MockGen. DO NOT EDIT.
// Source: adapterInterfaces.go

// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	entities "github.com/akshay0074700747/project-company_management-project-service/entities"
	gomock "github.com/golang/mock/gomock"
	v7 "github.com/minio/minio-go/v7"
)

// MockProjectAdapterInterfaces is a mock of ProjectAdapterInterfaces interface.
type MockProjectAdapterInterfaces struct {
	ctrl     *gomock.Controller
	recorder *MockProjectAdapterInterfacesMockRecorder
}

// MockProjectAdapterInterfacesMockRecorder is the mock recorder for MockProjectAdapterInterfaces.
type MockProjectAdapterInterfacesMockRecorder struct {
	mock *MockProjectAdapterInterfaces
}

// NewMockProjectAdapterInterfaces creates a new mock instance.
func NewMockProjectAdapterInterfaces(ctrl *gomock.Controller) *MockProjectAdapterInterfaces {
	mock := &MockProjectAdapterInterfaces{ctrl: ctrl}
	mock.recorder = &MockProjectAdapterInterfacesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectAdapterInterfaces) EXPECT() *MockProjectAdapterInterfacesMockRecorder {
	return m.recorder
}

// AcceptInvitation mocks base method.
func (m *MockProjectAdapterInterfaces) AcceptInvitation(arg0 entities.Members) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvitation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptInvitation indicates an expected call of AcceptInvitation.
func (mr *MockProjectAdapterInterfacesMockRecorder) AcceptInvitation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitation", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).AcceptInvitation), arg0)
}

// AddMember mocks base method.
func (m *MockProjectAdapterInterfaces) AddMember(arg0 entities.Members) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMember", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMember indicates an expected call of AddMember.
func (mr *MockProjectAdapterInterfacesMockRecorder) AddMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).AddMember), arg0)
}

// AddMemberStatueses mocks base method.
func (m *MockProjectAdapterInterfaces) AddMemberStatueses(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMemberStatueses", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMemberStatueses indicates an expected call of AddMemberStatueses.
func (mr *MockProjectAdapterInterfacesMockRecorder) AddMemberStatueses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMemberStatueses", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).AddMemberStatueses), arg0)
}

// AddOwner mocks base method.
func (m *MockProjectAdapterInterfaces) AddOwner(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOwner", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOwner indicates an expected call of AddOwner.
func (mr *MockProjectAdapterInterfacesMockRecorder) AddOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOwner", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).AddOwner), arg0, arg1)
}

// ApproveExtensionRequest mocks base method.
func (m *MockProjectAdapterInterfaces) ApproveExtensionRequest(arg0 uint, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveExtensionRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveExtensionRequest indicates an expected call of ApproveExtensionRequest.
func (mr *MockProjectAdapterInterfacesMockRecorder) ApproveExtensionRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveExtensionRequest", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).ApproveExtensionRequest), arg0, arg1)
}

// AskExtension mocks base method.
func (m *MockProjectAdapterInterfaces) AskExtension(arg0 entities.Extensions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskExtension", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AskExtension indicates an expected call of AskExtension.
func (mr *MockProjectAdapterInterfacesMockRecorder) AskExtension(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskExtension", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).AskExtension), arg0)
}

// CreateProject mocks base method.
func (m *MockProjectAdapterInterfaces) CreateProject(arg0 entities.Credentials, arg1 string) (entities.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0, arg1)
	ret0, _ := ret[0].(entities.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectAdapterInterfacesMockRecorder) CreateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).CreateProject), arg0, arg1)
}

// DeleteFeedback mocks base method.
func (m *MockProjectAdapterInterfaces) DeleteFeedback(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeedback", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFeedback indicates an expected call of DeleteFeedback.
func (mr *MockProjectAdapterInterfacesMockRecorder) DeleteFeedback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeedback", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).DeleteFeedback), arg0, arg1)
}

// DenyInvitation mocks base method.
func (m *MockProjectAdapterInterfaces) DenyInvitation(arg0 entities.Members) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DenyInvitation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DenyInvitation indicates an expected call of DenyInvitation.
func (mr *MockProjectAdapterInterfacesMockRecorder) DenyInvitation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DenyInvitation", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).DenyInvitation), arg0)
}

// DropProject mocks base method.
func (m *MockProjectAdapterInterfaces) DropProject(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropProject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropProject indicates an expected call of DropProject.
func (mr *MockProjectAdapterInterfacesMockRecorder) DropProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropProject", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).DropProject), arg0)
}

// EditFeedback mocks base method.
func (m *MockProjectAdapterInterfaces) EditFeedback(arg0 entities.Ratings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditFeedback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditFeedback indicates an expected call of EditFeedback.
func (mr *MockProjectAdapterInterfacesMockRecorder) EditFeedback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditFeedback", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).EditFeedback), arg0)
}

// EditMember mocks base method.
func (m *MockProjectAdapterInterfaces) EditMember(arg0 entities.Members) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMember", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditMember indicates an expected call of EditMember.
func (mr *MockProjectAdapterInterfacesMockRecorder) EditMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMember", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).EditMember), arg0)
}

// EditProject mocks base method.
func (m *MockProjectAdapterInterfaces) EditProject(arg0 entities.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditProject indicates an expected call of EditProject.
func (mr *MockProjectAdapterInterfacesMockRecorder) EditProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProject", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).EditProject), arg0)
}

// GetCompletedMembers mocks base method.
func (m *MockProjectAdapterInterfaces) GetCompletedMembers(arg0 string, arg1 []string) ([]entities.GetCompletedMemebersAdapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompletedMembers", arg0, arg1)
	ret0, _ := ret[0].([]entities.GetCompletedMemebersAdapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompletedMembers indicates an expected call of GetCompletedMembers.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetCompletedMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompletedMembers", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetCompletedMembers), arg0, arg1)
}

// GetCountMembers mocks base method.
func (m *MockProjectAdapterInterfaces) GetCountMembers(arg0 string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountMembers", arg0)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountMembers indicates an expected call of GetCountMembers.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetCountMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountMembers", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetCountMembers), arg0)
}

// GetCountofLivemembers mocks base method.
func (m *MockProjectAdapterInterfaces) GetCountofLivemembers(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountofLivemembers", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountofLivemembers indicates an expected call of GetCountofLivemembers.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetCountofLivemembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountofLivemembers", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetCountofLivemembers), arg0)
}

// GetExtensionRequestsinaProject mocks base method.
func (m *MockProjectAdapterInterfaces) GetExtensionRequestsinaProject(arg0 string) ([]entities.Extensions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtensionRequestsinaProject", arg0)
	ret0, _ := ret[0].([]entities.Extensions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtensionRequestsinaProject indicates an expected call of GetExtensionRequestsinaProject.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetExtensionRequestsinaProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionRequestsinaProject", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetExtensionRequestsinaProject), arg0)
}

// GetIDfromName mocks base method.
func (m *MockProjectAdapterInterfaces) GetIDfromName(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDfromName", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDfromName indicates an expected call of GetIDfromName.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetIDfromName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDfromName", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetIDfromName), arg0)
}

// GetIssuesofMember mocks base method.
func (m *MockProjectAdapterInterfaces) GetIssuesofMember(arg0, arg1 string) (entities.Issues, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuesofMember", arg0, arg1)
	ret0, _ := ret[0].(entities.Issues)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuesofMember indicates an expected call of GetIssuesofMember.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetIssuesofMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuesofMember", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetIssuesofMember), arg0, arg1)
}

// GetIssuesofProject mocks base method.
func (m *MockProjectAdapterInterfaces) GetIssuesofProject(arg0 string) ([]entities.Issues, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuesofProject", arg0)
	ret0, _ := ret[0].([]entities.Issues)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuesofProject indicates an expected call of GetIssuesofProject.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetIssuesofProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuesofProject", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetIssuesofProject), arg0)
}

// GetListofRoleIds mocks base method.
func (m *MockProjectAdapterInterfaces) GetListofRoleIds(arg0 []string, arg1 string) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListofRoleIds", arg0, arg1)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListofRoleIds indicates an expected call of GetListofRoleIds.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetListofRoleIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListofRoleIds", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetListofRoleIds), arg0, arg1)
}

// GetLiveProjectsofCompany mocks base method.
func (m *MockProjectAdapterInterfaces) GetLiveProjectsofCompany(arg0 string) ([]entities.GetLiveProjectsUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiveProjectsofCompany", arg0)
	ret0, _ := ret[0].([]entities.GetLiveProjectsUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiveProjectsofCompany indicates an expected call of GetLiveProjectsofCompany.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetLiveProjectsofCompany(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiveProjectsofCompany", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetLiveProjectsofCompany), arg0)
}

// GetNoofMembers mocks base method.
func (m *MockProjectAdapterInterfaces) GetNoofMembers(arg0 string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoofMembers", arg0)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoofMembers indicates an expected call of GetNoofMembers.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetNoofMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoofMembers", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetNoofMembers), arg0)
}

// GetProjectDeadline mocks base method.
func (m *MockProjectAdapterInterfaces) GetProjectDeadline(arg0 string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectDeadline", arg0)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectDeadline indicates an expected call of GetProjectDeadline.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetProjectDeadline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectDeadline", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetProjectDeadline), arg0)
}

// GetProjectDetails mocks base method.
func (m *MockProjectAdapterInterfaces) GetProjectDetails(arg0 string) (entities.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectDetails", arg0)
	ret0, _ := ret[0].(entities.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectDetails indicates an expected call of GetProjectDetails.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetProjectDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectDetails", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetProjectDetails), arg0)
}

// GetProjectInvites mocks base method.
func (m *MockProjectAdapterInterfaces) GetProjectInvites(arg0 string) ([]entities.ProjectInviteUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectInvites", arg0)
	ret0, _ := ret[0].([]entities.ProjectInviteUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectInvites indicates an expected call of GetProjectInvites.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetProjectInvites(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectInvites", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetProjectInvites), arg0)
}

// GetProjectMembers mocks base method.
func (m *MockProjectAdapterInterfaces) GetProjectMembers(arg0 string) ([]entities.GetProjectMembersUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectMembers", arg0)
	ret0, _ := ret[0].([]entities.GetProjectMembersUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectMembers indicates an expected call of GetProjectMembers.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetProjectMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectMembers", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetProjectMembers), arg0)
}

// GetRating mocks base method.
func (m *MockProjectAdapterInterfaces) GetRating(arg0, arg1 string) (entities.Ratings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRating", arg0, arg1)
	ret0, _ := ret[0].(entities.Ratings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRating indicates an expected call of GetRating.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetRating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRating", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetRating), arg0, arg1)
}

// GetRoleID mocks base method.
func (m *MockProjectAdapterInterfaces) GetRoleID(arg0 string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleID", arg0)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleID indicates an expected call of GetRoleID.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetRoleID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleID", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetRoleID), arg0)
}

// GetStagesandDeadline mocks base method.
func (m *MockProjectAdapterInterfaces) GetStagesandDeadline(arg0 []string, arg1 string) ([]entities.TaskAssignations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStagesandDeadline", arg0, arg1)
	ret0, _ := ret[0].([]entities.TaskAssignations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStagesandDeadline indicates an expected call of GetStagesandDeadline.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetStagesandDeadline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStagesandDeadline", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetStagesandDeadline), arg0, arg1)
}

// GetStagesofProgress mocks base method.
func (m *MockProjectAdapterInterfaces) GetStagesofProgress(arg0, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStagesofProgress", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStagesofProgress indicates an expected call of GetStagesofProgress.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetStagesofProgress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStagesofProgress", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetStagesofProgress), arg0, arg1)
}

// GetTaskDetails mocks base method.
func (m *MockProjectAdapterInterfaces) GetTaskDetails(arg0, arg1 string) (entities.TaskAssignations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskDetails", arg0, arg1)
	ret0, _ := ret[0].(entities.TaskAssignations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskDetails indicates an expected call of GetTaskDetails.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetTaskDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskDetails", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetTaskDetails), arg0, arg1)
}

// GetTaskFromMinio mocks base method.
func (m *MockProjectAdapterInterfaces) GetTaskFromMinio(arg0 context.Context, arg1 string, arg2 v7.GetObjectOptions) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskFromMinio", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskFromMinio indicates an expected call of GetTaskFromMinio.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetTaskFromMinio(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskFromMinio", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetTaskFromMinio), arg0, arg1, arg2)
}

// GetTaskStatuses mocks base method.
func (m *MockProjectAdapterInterfaces) GetTaskStatuses(arg0 []int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskStatuses", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskStatuses indicates an expected call of GetTaskStatuses.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetTaskStatuses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskStatuses", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetTaskStatuses), arg0)
}

// GetVerifiedTasks mocks base method.
func (m *MockProjectAdapterInterfaces) GetVerifiedTasks(arg0 string) ([]entities.VerifiedTasksUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifiedTasks", arg0)
	ret0, _ := ret[0].([]entities.VerifiedTasksUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifiedTasks indicates an expected call of GetVerifiedTasks.
func (mr *MockProjectAdapterInterfacesMockRecorder) GetVerifiedTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifiedTasks", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).GetVerifiedTasks), arg0)
}

// InsertNonTechnicalTasks mocks base method.
func (m *MockProjectAdapterInterfaces) InsertNonTechnicalTasks(arg0 entities.NonTechnicalTaskDetials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNonTechnicalTasks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNonTechnicalTasks indicates an expected call of InsertNonTechnicalTasks.
func (mr *MockProjectAdapterInterfacesMockRecorder) InsertNonTechnicalTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNonTechnicalTasks", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).InsertNonTechnicalTasks), arg0)
}

// InsertStatuses mocks base method.
func (m *MockProjectAdapterInterfaces) InsertStatuses(arg0 entities.TaskStatuses) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertStatuses", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertStatuses indicates an expected call of InsertStatuses.
func (mr *MockProjectAdapterInterfacesMockRecorder) InsertStatuses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertStatuses", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).InsertStatuses), arg0)
}

// InsertTaskDetails mocks base method.
func (m *MockProjectAdapterInterfaces) InsertTaskDetails(arg0 entities.TaskAssignations) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTaskDetails", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTaskDetails indicates an expected call of InsertTaskDetails.
func (mr *MockProjectAdapterInterfacesMockRecorder) InsertTaskDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTaskDetails", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).InsertTaskDetails), arg0)
}

// InsertTasktoMinio mocks base method.
func (m *MockProjectAdapterInterfaces) InsertTasktoMinio(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 int64, arg4 v7.PutObjectOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTasktoMinio", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTasktoMinio indicates an expected call of InsertTasktoMinio.
func (mr *MockProjectAdapterInterfacesMockRecorder) InsertTasktoMinio(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTasktoMinio", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).InsertTasktoMinio), arg0, arg1, arg2, arg3, arg4)
}

// IsCompanyBased mocks base method.
func (m *MockProjectAdapterInterfaces) IsCompanyBased(arg0 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCompanyBased", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsCompanyBased indicates an expected call of IsCompanyBased.
func (mr *MockProjectAdapterInterfacesMockRecorder) IsCompanyBased(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCompanyBased", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).IsCompanyBased), arg0)
}

// IsMemberExists mocks base method.
func (m *MockProjectAdapterInterfaces) IsMemberExists(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMemberExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMemberExists indicates an expected call of IsMemberExists.
func (mr *MockProjectAdapterInterfacesMockRecorder) IsMemberExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMemberExists", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).IsMemberExists), arg0, arg1)
}

// IsOwner mocks base method.
func (m *MockProjectAdapterInterfaces) IsOwner(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOwner", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner.
func (mr *MockProjectAdapterInterfacesMockRecorder) IsOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).IsOwner), arg0, arg1)
}

// IsProjectUsernameExists mocks base method.
func (m *MockProjectAdapterInterfaces) IsProjectUsernameExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProjectUsernameExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsProjectUsernameExists indicates an expected call of IsProjectUsernameExists.
func (mr *MockProjectAdapterInterfacesMockRecorder) IsProjectUsernameExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProjectUsernameExists", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).IsProjectUsernameExists), arg0)
}

// LogintoProject mocks base method.
func (m *MockProjectAdapterInterfaces) LogintoProject(arg0, arg1 string) (entities.Members, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogintoProject", arg0, arg1)
	ret0, _ := ret[0].(entities.Members)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogintoProject indicates an expected call of LogintoProject.
func (mr *MockProjectAdapterInterfacesMockRecorder) LogintoProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogintoProject", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).LogintoProject), arg0, arg1)
}

// MemberState mocks base method.
func (m *MockProjectAdapterInterfaces) MemberState(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberState", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberState indicates an expected call of MemberState.
func (mr *MockProjectAdapterInterfacesMockRecorder) MemberState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberState", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).MemberState), arg0, arg1)
}

// RaiseIssue mocks base method.
func (m *MockProjectAdapterInterfaces) RaiseIssue(arg0 entities.Issues) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RaiseIssue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RaiseIssue indicates an expected call of RaiseIssue.
func (mr *MockProjectAdapterInterfacesMockRecorder) RaiseIssue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RaiseIssue", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).RaiseIssue), arg0)
}

// RateTask mocks base method.
func (m *MockProjectAdapterInterfaces) RateTask(arg0 entities.Ratings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RateTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RateTask indicates an expected call of RateTask.
func (mr *MockProjectAdapterInterfacesMockRecorder) RateTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RateTask", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).RateTask), arg0)
}

// TerminateProjectMembers mocks base method.
func (m *MockProjectAdapterInterfaces) TerminateProjectMembers(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateProjectMembers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminateProjectMembers indicates an expected call of TerminateProjectMembers.
func (mr *MockProjectAdapterInterfacesMockRecorder) TerminateProjectMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateProjectMembers", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).TerminateProjectMembers), arg0, arg1)
}

// VerifyTaskCompletion mocks base method.
func (m *MockProjectAdapterInterfaces) VerifyTaskCompletion(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyTaskCompletion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyTaskCompletion indicates an expected call of VerifyTaskCompletion.
func (mr *MockProjectAdapterInterfacesMockRecorder) VerifyTaskCompletion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTaskCompletion", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).VerifyTaskCompletion), arg0, arg1, arg2)
}

// insertIntoCompanyBased mocks base method.
func (m *MockProjectAdapterInterfaces) insertIntoCompanyBased(arg0 entities.Companies) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "insertIntoCompanyBased", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// insertIntoCompanyBased indicates an expected call of insertIntoCompanyBased.
func (mr *MockProjectAdapterInterfacesMockRecorder) insertIntoCompanyBased(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "insertIntoCompanyBased", reflect.TypeOf((*MockProjectAdapterInterfaces)(nil).insertIntoCompanyBased), arg0)
}
